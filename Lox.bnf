program     = declaration* EOF;

declaration = funDecl
            | varDecl
            | statement;

funDecl     = fun function;

function    = IDENTIFIER "(" parameters? ")" block;

parameters  = IDENTIFIER ("," IDENTIFIER)*;

varDecl     = "var" IDENTIFIER ("=" expression)? ";" ;

statement   = exprStmt
            | ifStmt
            | whileStmt
            | forStmt
            | printStmt
            | returnStmt
            | block;

ifStmt      = "if" "(" expression ")" statement ("else" statement)?;

whileStmt   = "while" "(" expression ")" statement;

forStmt     = "for" "(" (varDecl | exprStmt | ";") expression? ";" expression?) ")" statement;

block       = "{" declaration* "}" ;

exprStmt    = expression ";" ;

printStmt   = "print" expression ";" ;

returnStmt  = "return" expression? ";" ;

expression  = assignment ;

assignment  = IDENTIFIER "=" assignment
            | logic_or ;

logic_or    = logic_and ("or" logic_and)* ;

logic_and   = equality ("and" equality)* ;

equality    = comparison ( ( "!=" | "==" ) comparison )* ;

comparison  = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term        = factor ( ( "*" | "/" ) factor )* ;

factor      = unary ( ( "-" | "+" ) unary )* ;

unary       = ( "!" | "-" ) unary
            | call ;

call        = primary ( "(" arguments? ")" )* ;

primary     = "true"
            | "false"
            | "nil"
            | NUMBER
            | STRING
            | IDENTIFIER
            | "(" expression ")" ;
